/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package atm.view.frame;

import atm.data.BankDatabaseImpl;
import atm.model.AtmImpl;
import atm.states.Login;
import atm.states.Start;
import atm.view.CashDispenser;
import atm.view.DepositSlot;
import atm.view.Keypad;
import atm.view.Screen;
import java.awt.event.MouseEvent;
import static java.lang.Thread.sleep;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;

/**
 *
 * @author Rachel
 */
public class View extends  javax.swing.JFrame implements Keypad, Screen, DepositSlot, CashDispenser{
    private static Logger logger = Logger.getLogger(View.class.getName());
    
    private String inputVal = "";
    private boolean noInput = true;
    private static boolean printInput = false;
    private boolean inputChoice = false;
    private int accountNumber=0;
    AtmImpl atm;
    
    public View() {
        initComponents();
        BankDatabaseImpl bankDAO = new BankDatabaseImpl();
        atm = new AtmImpl(bankDAO);
        this.outputTextArea.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        button4 = new javax.swing.JButton();
        button5 = new javax.swing.JButton();
        button6 = new javax.swing.JButton();
        button7 = new javax.swing.JButton();
        button8 = new javax.swing.JButton();
        button9 = new javax.swing.JButton();
        button0 = new javax.swing.JButton();
        enter = new javax.swing.JButton();
        takeCash = new javax.swing.JButton();
        insertCash = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 153, 255));

        jPanel1.setBackground(new java.awt.Color(140, 189, 229));

        outputTextArea.setBackground(new java.awt.Color(255, 255, 255));
        outputTextArea.setColumns(20);
        outputTextArea.setFont(new java.awt.Font("DialogInput", 1, 15)); // NOI18N
        outputTextArea.setRows(5);
        outputTextArea.setText("pruebaaaaaaa de textoooooo");
        outputTextArea.setBorder(javax.swing.BorderFactory.createMatteBorder(8, 8, 8, 8, new java.awt.Color(10, 111, 144)));
        jScrollPane1.setViewportView(outputTextArea);

        jPanel2.setBackground(new java.awt.Color(140, 189, 229));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        button1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/button 1.png"))); // NOI18N
        button1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                button1MouseReleased(evt);
            }
        });

        button2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/button2.png"))); // NOI18N
        button2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                button2MouseReleased(evt);
            }
        });

        button3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/button3.png"))); // NOI18N
        button3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                button3MouseReleased(evt);
            }
        });

        button4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/button4.png"))); // NOI18N
        button4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                button4MouseReleased(evt);
            }
        });

        button5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/button5.png"))); // NOI18N
        button5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                button5MouseReleased(evt);
            }
        });

        button6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/button6.png"))); // NOI18N
        button6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                button6MouseReleased(evt);
            }
        });

        button7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/button7.png"))); // NOI18N
        button7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                button7MouseReleased(evt);
            }
        });

        button8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/button8.png"))); // NOI18N
        button8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                button8MouseReleased(evt);
            }
        });

        button9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/button9.png"))); // NOI18N
        button9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                button9MouseReleased(evt);
            }
        });

        button0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/button0.png"))); // NOI18N
        button0.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                button0MouseReleased(evt);
            }
        });

        enter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/enter.png"))); // NOI18N
        enter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                enterMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(button7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(button0, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button0, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(enter, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        takeCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/tome.png"))); // NOI18N

        insertCash.setIcon(new javax.swing.ImageIcon(getClass().getResource("/atm/view/icons/inserte.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(takeCash, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(insertCash, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(takeCash, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(insertCash, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_enterMouseClicked
        this.printInput = false;
        if(!inputVal.isEmpty()){
           noInput = false;
        }
       noInput = false;
        
    }//GEN-LAST:event_enterMouseClicked

    private void button1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button1MouseReleased
        jButtonActionPerformed(evt,1);
    }//GEN-LAST:event_button1MouseReleased

    private void button2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button2MouseReleased
        jButtonActionPerformed(evt,2);
    }//GEN-LAST:event_button2MouseReleased

    private void button3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button3MouseReleased
        jButtonActionPerformed(evt,3);
    }//GEN-LAST:event_button3MouseReleased

    private void button4MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button4MouseReleased
        jButtonActionPerformed(evt,4);
    }//GEN-LAST:event_button4MouseReleased

    private void button5MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button5MouseReleased
        jButtonActionPerformed(evt,5);
    }//GEN-LAST:event_button5MouseReleased

    private void button6MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button6MouseReleased
        jButtonActionPerformed(evt,6);
    }//GEN-LAST:event_button6MouseReleased

    private void button7MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button7MouseReleased
        jButtonActionPerformed(evt,7);
    }//GEN-LAST:event_button7MouseReleased

    private void button8MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button8MouseReleased
        jButtonActionPerformed(evt,8);
    }//GEN-LAST:event_button8MouseReleased

    private void button9MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button9MouseReleased
        jButtonActionPerformed(evt,9);
    }//GEN-LAST:event_button9MouseReleased

    private void button0MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button0MouseReleased
        jButtonActionPerformed(evt,0);
    }//GEN-LAST:event_button0MouseReleased
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                try {
//                    new View().setVisible(true);
//                } catch (InterruptedException ex) {
//                    Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
//                }
            }
        });
    }
        
    public void inicio(){
        this.displayMessageLine("\nWelcome!");
        try {
            sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.displayMessage("\nPlease enter your account number: ");

        int accountNumber = this.getInput(); // input account number

        this.displayMessage("\nEnter your PIN: "); // prompt for PIN
        int pin = this.getInput(); // input PIN
        if (atm.authenticateUser(accountNumber, pin)) {
            this.accountNumber = accountNumber;
            MenuPrincipal();
        } else {
            this.displayMessageLine("Invalid account number or PIN. Please try again.");
            try {
                sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            }
            inicio();
        }
    }
            
    private void jButtonActionPerformed(MouseEvent evt,int valor) {   
        JButton btn = (JButton) evt.getSource();
        System.out.println(valor);
        if(this.inputChoice){
            inputVal = ""+valor;
            noInput = false;
            this.inputChoice = false;
            return;
        }
        
        inputVal += valor+"";
        
        if(this.printInput){
            this.outputTextArea.append(valor+"");
        }
        logger.finer(inputVal);
    }
    
    public void MenuPrincipal() {
        int aux= displayMainMenu();
        atm.startTransaction(aux);
        // de aqui se tiene que saber de alguna manera el estado para saber que sacar en pantalla lo referente a ese estado
        switch(aux){
            case 1:
                double[] info=atm.getBalance(this.accountNumber);
                this.displayMessageLine( "\nBalance Information:" );
                this.displayMessage( "- Available balance: " ); 
                this.displayDollarAmount(info[0]);
                this.displayMessage( "- Total balance:     " );
                this.displayDollarAmount( info[1] );
                this.displayMessageLine( "" );
                espera(2000);
                MenuPrincipal();
                break;
            case 2:
                int aux2=displayMenuOfAmounts();
                if(aux2==6){
                    atm.setState(new Start(atm));// es la única forma 
                    MenuPrincipal();
                }
                if(atm.debit(this.accountNumber, aux2)){
                    this.displayMessageLine( "\nYour cash has been dispensed. \nPlease take your cash now." );
                    espera(2000);
                    MenuPrincipal();
                }else{
                    this.displayMessageLine( "\nInsufficient cash available in the ATM. \n\nPlease choose a smaller amount." );
                }
                break;
            case 3:
                if(atm.credit(accountNumber, promptForDepositAmount())){
                    
                }else{
                    
                }
                break;
            case 4:
                inicio();
                break;
            default: 
                MenuPrincipal();
                break;
        }
    }
    
    public void espera(int x){
        try {
            sleep(x);
        } catch (InterruptedException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private int displayMainMenu()
   {
      this.displayMessageLine( "\nMain menu:" );
      this.displayMessageLine( "1 - View my balance" );
      this.displayMessageLine( "2 - Withdraw cash" );
      this.displayMessageLine( "3 - Deposit funds" );
      this.displayMessageLine( "4 - Exit\n" );
      this.displayMessage( "Enter a choice: " );
       printAll(getGraphics());
      return this.getInput(); // return user's selection
   } // end method displayMainMenu
    
   private int displayMenuOfAmounts()
   { 
      int userChoice = 0; // local variable to store return value
      // array of amounts to correspond to menu numbers
      int[] amounts = { 0, 20, 40, 60, 100, 200 };
      // loop while no valid choice has been made
      while ( userChoice == 0 )
      {
         // display the menu
         this.displayMessageLine( "\nWithdrawal Menu:" );
         this.displayMessageLine( "1 - $20 \t2 - $40" );
         this.displayMessageLine( "3 - $60 \t4 - $100" );
         this.displayMessageLine( "5 - $200 \t6 - Cancel transaction" );
         this.displayMessage( "Choose a withdrawal amount: " );

         int input = this.getInput(); // get user input through keypad

         // determine how to proceed based on the input value
         switch ( input )
         {
            case 1: // if the user chose a withdrawal amount 
               userChoice = amounts[ input ]; // save user's choice
               break;  
            case 2: // (i.e., chose option 1, 2, 3, 4 or 5), return the
               userChoice = amounts[ input ]; // save user's choice
               break;  
            case 3: // corresponding amount from amounts array
               userChoice = amounts[ input ]; // save user's choice
               break;  
            case 4:
               userChoice = amounts[ input ]; // save user's choice
               break;  
            case 5:
               userChoice = amounts[ input ]; // save user's choice
               break;       
            case 6: // the user chose to cancel
                userChoice=6;
               break;
            default: // the user did not enter a value from 1-6
               this.displayMessageLine( "\nInvalid selection. Try again." );
               espera(1500);
         } // end switch
      } // end while

      return userChoice; // return withdrawal amount or CANCELED
   } // end method displayMenuOfAmounts
   
   private double promptForDepositAmount()
   {
      // display the prompt
      this.displayMessage( "\nPlease enter a deposit amount in " + 
         "CENTS (or 0 to cancel): \n" );
      int input = this.getInput(); // receive input of deposit amount
      
      // check whether the user canceled or entered a valid amount
      if ( input == 0 ) // si es la opcion de canselar entonces se sale
         return 0;
      else
      {
         return ( double ) input / 100; // return dollar amount 
      } // end else
   } // end method promptForDepositAmount
   
   private void displayDebit(int cancel, int amout){
       if(cancel==0){
//       this.displayMessage( 
//            "\nPlease insert a deposit envelope containing " );
//         this.displayDollarAmount( amount );
//         this.displayMessageLine( "." );
//
//         // receive deposit envelope
//         boolean envelopeReceived = depositSlot.isEnvelopeReceived();
//
//         // check whether deposit envelope was received
//         if ( envelopeReceived )
//         {  
//            screen.displayMessageLine( "\nYour envelope has been " + 
//               "received.\nNOTE: The money just deposited will not " + 
//               "be available until we verify the amount of any " +
//               "enclosed cash and your checks clear." );
//            
//            // credit account to reflect the deposit
//            bankDatabase.credit( getAccountNumber(), amount ); 
//         } // end if
//         else // deposit envelope not received
//         {
//            screen.displayMessageLine( "\nYou did not insert an " +
//               "envelope, so the ATM has canceled your transaction." );
//         } // end else
      } // end if 
      else // user canceled instead of entering amount
      {
         this.displayMessageLine( "\nCanceling transaction..." );
      } // end else
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button0;
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JButton button4;
    private javax.swing.JButton button5;
    private javax.swing.JButton button6;
    private javax.swing.JButton button7;
    private javax.swing.JButton button8;
    private javax.swing.JButton button9;
    private javax.swing.JButton enter;
    private javax.swing.JButton insertCash;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JButton takeCash;
    // End of variables declaration//GEN-END:variables

    @Override
    public int getInput() {
      inputVal = "";
      noInput = true;
     
      while(noInput){
          try{
              Thread.sleep(50);
          } catch (InterruptedException e){}
      }
      logger.fine(inputVal);
      if(inputVal.equals("")){
          getInput();
      }
      int input=0;
      try{
       input = Integer.parseInt(inputVal);
      }catch(Exception ex){
          
      }
      inputVal = "";
      noInput = true;
      printInput = false;
      return input;
    }

    @Override
    public void displayDollarAmount(double amount) {
        this.outputTextArea.append(amount + "\n");    
    }

    @Override
    public void displayMessage(String message) {
        logger.fine(message);
        if(message == null){
            this.inputChoice = true;
            return;
        }
        
        if(message.isEmpty()){
            this.printInput = true;
            return;
        }
        
        if(message.startsWith("\n")){
            this.outputTextArea.setText("");
        }
        this.outputTextArea.append(message);
    }

    @Override
    public void displayMessageLine(String message) {
        logger.fine(message);
  
        if(message.startsWith("\n"))
            this.outputTextArea.setText("");
        
        this.outputTextArea.append(message);
        this.outputTextArea.append("\n");
        
        if(message.isEmpty()){
            try{
                Thread.sleep(2000);
            }catch (InterruptedException ex){}
        }
    }

    @Override
    public boolean isEnvelopeReceived() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       return true;//para que compile
    }

    @Override
    public void dispenseCash(int amount) {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean isSufficientCashAvailable(int amount) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        return true;//para que compile
    }
}
